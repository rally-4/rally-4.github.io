let renderer,scene,camera,controls;function main(){const e=document.getElementById("Ada");e.borderColor="rgb(180,60,45)";const t=document.getElementById("Desper");t.borderColor="rgb(85,69,80)";const n=document.getElementById("Heie");n.borderColor="rgb(102,204,255)";const o=document.getElementById("Weia");o.borderColor="rgb(32,161,129)";const r=document.getElementById("Trichotus");r.borderColor="rgb(210,255,255)";const i=document.getElementById("Xi");i.borderColor="rgb(60,160,255)";const a=[e,t,n,o,r,i];function swap(e){for(let t=0;t<a.length;t++)g[t].name==e.name?(y=e,a[t].style.borderColor=a[t].borderColor):a[t].style.borderColor="rgb(30,30,30)"}function VecSubstr(e,t){return new THREE.Vector3(e.x-t.x,e.y-t.y,e.z-t.z)}e.addEventListener("click",(()=>{swap(g[0])})),t.addEventListener("click",(()=>{swap(g[1])})),n.addEventListener("click",(()=>{swap(g[2])})),o.addEventListener("click",(()=>{swap(g[3])})),r.addEventListener("click",(()=>{swap(g[4])})),i.addEventListener("click",(()=>{swap(g[5])}));const s=document.querySelector("#C");scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,8192),scene.add(camera),renderer=new THREE.WebGLRenderer({canvas:s,antialiasing:!0}),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(window.devicePixelRatio),renderer.setClearColor(0,0),renderer.autoClear=!1;const c=new THREE.SphereGeometry(4096,128,128),d=new THREE.MeshBasicMaterial({map:(new THREE.TextureLoader).load("assets/galaxy.png"),side:THREE.BackSide}),l=new THREE.Mesh(c,d);l.position.set(0,0,0),scene.add(l);const u=new THREE.AmbientLight(16777215,.2),m=new THREE.PointLight(16777215,.8);m.position.set(0,0,0),scene.add(u),scene.add(m);const p=new THREE.SphereGeometry(5,64,64),E=new THREE.MeshPhongMaterial({map:(new THREE.TextureLoader).load("assets/BlueStar.png"),emissive:4235519,side:THREE.BackSide}),v=new THREE.Mesh(p,E);v.position.set(0,0,0),scene.add(v),controls=new THREE.OrbitControls(camera,renderer.domElement),controls.target.set(-500,0,0),controls.autoRotate=!1,controls.autoRotateSpeed=0,controls.maxDistance=20,controls.minDistance=2.5,controls.enablePan=!1,camera.lookAt(new THREE.Vector3(-500,0,0)),camera.position.set(-504,0,0),camera.updateProjectionMatrix(),camera.updateMatrixWorld(!0);var f=["precision highp float;","precision highp int;","attribute vec4 a_position;","varying vec4 v_position;","varying mat4 v_model;","uniform mat4 u_model;","uniform mat4 u_projection;","void main(){","v_position = a_position;","v_model = u_model;","gl_Position = u_projection * u_model * a_position;","}"].join("\n"),w=["#define HIGHP","precision highp float;","precision highp int;","const float PI = 3.14159263589793;","const float MAX = 10000.0;","const float PEAK = 0.1;","const float FLARE = 0.0025;","const float INTENSITY = 14.3;","const float G_M = -0.85;","const int numOutScatter = 3;","const float fNumOutScatter = float(3);","const int numInScatter = 3;","const float fNumInScatter = float(3);","varying vec4 v_position;","varying mat4 v_model;","uniform float u_innerRadius;","uniform float u_outerRadius;","uniform vec3 u_color;","uniform vec2 u_resolution;","uniform float u_time;","uniform vec3 u_campos;","uniform vec3 u_rcampos;","uniform mat4 u_invproj;","uniform vec3 u_light;","vec2 rayIntersection(vec3 p, vec3 dir, float radius){","float b = dot(p, dir);","float c = dot(p, p) - radius * radius;","float d = b * b - c;","if(d < 0.0){","return vec2(MAX, -MAX);","}","d = sqrt(d);","float near = -b - d;","float far = -b + d;","return vec2(near, far);","}","float miePhase(float g, float c, float cc){","float gg = g * g;","float a = (1.0 - gg) * (1.0 + cc);","float b = 1.0 + gg - 2.0 * g * c;","b *= sqrt(b);","b *= 2.0 + gg;","return 1.5 * a / b;","}","float rayleighPhase(float cc){","return 0.75 * (1.0 + cc);","}","float density(vec3 p){","return exp(-(length(p) - u_innerRadius) * (4.0 / (u_outerRadius - u_innerRadius)));","}","float optic(vec3 p, vec3 q){","vec3 step = (q - p) / fNumOutScatter;","vec3 v = p + step * 0.5;","float sum = 0.0;","for(int i = 0; i < numOutScatter; i++){","sum += density(v);","v += step;","}","sum *= length(step)*(1.0 / (u_outerRadius - u_innerRadius));","return sum;","}","vec3 inScatter(vec3 o, vec3 dir, vec2 e, vec3 l){","float len = (e.y - e.x) / fNumInScatter;","vec3 step = dir * len;","vec3 p = o + dir * e.x;","vec3 v = p + dir * (len * 0.5);","vec3 sum = vec3(0.0);","for(int i = 0; i < numInScatter; i++){","vec2 f = rayIntersection(v, l, u_outerRadius);","vec3 u = v + l * f.y;","float n = (optic(p, v) + optic(v, u))*(PI * 4.0);","sum += density(v) * exp(-n * (PEAK * u_color + FLARE));","v += step;","}","sum *= len * (1.0 / (u_outerRadius - u_innerRadius));","float c = dot(dir, -l);","float cc = c * c;","return sum * (PEAK * u_color * rayleighPhase(cc) + FLARE * miePhase(G_M, c, cc)) * INTENSITY;","}","vec3 rayDirection(){","vec4 ray = v_model*v_position - vec4(u_campos, 1.0);","return normalize(vec3(ray));","}","void main(){","vec3 dir = rayDirection();","vec3 eye = u_rcampos;","vec3 l = u_light;","vec2 e = rayIntersection(eye, dir, u_outerRadius);","vec2 f = rayIntersection(eye, dir, u_innerRadius);","e.y = min(e.y, f.x);","vec3 result = inScatter(eye, dir, e, l);","gl_FragColor = vec4(result, 1.0);","}"].join("\n");let g=[],h=[],R=[],_=[],T=[];function AddPlanet(e="Earth",t=1,n=.001,o=100,r=[-100,0,0],i=0,a=30,s=0,c=!1,d=!1,l=0,u=.1,m=new THREE.Vector3(1,1,1),p=!1,E=.001){let y=new THREE.SphereGeometry(t,128,128),H=new THREE.MeshPhongMaterial({map:(new THREE.TextureLoader).load("assets/"+e+"/map.png"),normalMap:(new THREE.TextureLoader).load("assets/"+e+"/normal.png"),specularMap:(new THREE.TextureLoader).load("assets/"+e+"/specular.png"),shininess:a,emissive:s});s&&(H.emissiveMap=(new THREE.TextureLoader).load("assets/"+e+"/emissive.png")),c&&(H.displacementMap=(new THREE.TextureLoader).load("assets/"+e+"/displacement.png"),H.displacementScale=.4);let M=new THREE.Mesh(y,H);if(M.position.set(r[0],r[1],r[2]),M.scale.set(1,1,1),M.rotationSpeed=n,M.name=e,M.dst=o,M.ang=i,T.push(i),g.push(M),scene.add(M),d){let e=new THREE.SphereGeometry(1+t,128,128),n=e.attributes.position;e.setAttribute("a_position",new THREE.BufferAttribute(n.array,n.itemSize));let o=new THREE.ShaderMaterial({uniforms:{u_model:{value:M.matrixWorld.elements},u_projection:{value:(new THREE.Matrix4).multiplyMatrices(camera.matrixWorldInverse,camera.projectionMatrix).elements},u_invproj:{value:(new THREE.Matrix4).multiplyMatrices(camera.matrixWorldInverse,camera.projectionMatrix).invert().elements},u_innerRadius:{value:t+l},u_outerRadius:{value:t+u},u_color:{value:m},u_resolution:{value:new THREE.Vector2(window.innerWidth,window.innerHeight)},u_time:{value:0},u_campos:{value:camera.position},u_rcampos:{value:VecSubstr(camera.position,M.position)},u_light:{value:VecSubstr(v.position,M.position).normalize()}},vertexShader:f,fragmentShader:w,side:THREE.FrontSide,depthWrite:!1,blending:THREE.AdditiveBlending,transparent:!0}),i=new THREE.Mesh(e,o);i.position.set(r[0],r[1],r[2]),h.push(o),R.push(i),scene.add(i)}else h.push(!1),R.push(!1);if(p){let n=new THREE.SphereGeometry(t+.004,128,128),o=new THREE.MeshPhongMaterial({map:(new THREE.TextureLoader).load("assets/"+e+"/clouds.png"),shininess:0,specular:16777215,transparent:!0}),i=new THREE.Mesh(n,o);i.position.set(r[0],r[1],r[2]),i.rotationSpeed=E,_.push(i),scene.add(i)}else _.push(!1)}AddPlanet("Ada",.8,.002,80,[0,0,80],0,60,16744448,!0),AddPlanet("Desper",.7,-5e-4,175,[0,0,-175],Math.PI,10,0,!0),AddPlanet("Heie",1,-.0015,500,[-500,0,0],3*Math.PI/2,15,0,!1,!0,-.01,.1,new THREE.Vector3(.2,.75,1),!0,.001),AddPlanet("Weia",1.4,-.001,500,[500,0,0],Math.PI/2,45,0,!1,!1,0,.1,new THREE.Vector3(1,1,1),!0,.002),AddPlanet("Trichotus",1.5,-2e-4,1150,[1150,0,0],Math.PI/2,75,0,!0,!0,.21,.4,new THREE.Vector3(.5,1,1)),AddPlanet("Xi",1.1,.0011,1300,[0,0,-1300],Math.PI,0,0,!0);let y=g[2];const animate=()=>{requestAnimationFrame(animate),v.rotation.y+=.002,function Update(e,t,n,o){for(let r=0;r<t.length;r++){e[r].rotation.y+=e[r].rotationSpeed,e[r].ang+=.02/e[r].dst,nPos=[e[r].dst*Math.sin(e[r].ang),e[r].dst*Math.cos(e[r].ang)];let i=window.structuredClone(y.position);e[r].position.set(nPos[0],0,nPos[1]),y==e[r]&&(controls.target.set(y.position.x,0,y.position.z),camera.lookAt(new THREE.Vector3(y.position.x,0,y.position.z)),camera.position.x+=y.position.x-i.x,camera.position.z+=y.position.z-i.z),camera.updateProjectionMatrix(),camera.updateMatrixWorld(),e[r].updateMatrixWorld(),t[r]&&(n[r].position.set(nPos[0],0,nPos[1]),t[r].uniforms.u_light.value.copy(VecSubstr(v.position,e[r].position).normalize()),t[r].uniforms.u_campos.value.copy(camera.position),t[r].uniforms.u_rcampos.value.copy(VecSubstr(camera.position,e[r].position)),t[r].uniforms.u_model.value=e[r].matrixWorld.elements,t[r].uniforms.u_projection.value=(new THREE.Matrix4).multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse).elements,t[r].uniforms.u_invproj.value=(new THREE.Matrix4).multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse).invert().elements),o[r]&&(o[r].position.set(nPos[0],0,nPos[1]),o[r].rotation.y+=o[r].rotationSpeed)}}(g,h,R,_),renderer.render(scene,camera),controls.update()};animate(),window.addEventListener("resize",(()=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)})),window.onload=()=>{document.getElementById("S").style.display="none"}}window.addEventListener("DOMContentLoaded",main);
